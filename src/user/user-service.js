// Generated by CoffeeScript 1.7.1
(function() {
  var Location, LocationRepository, User, UserRepository, UserService, q;

  q = require('q');

  User = require('./user');

  UserRepository = require('./user-repository');

  Location = require('./location/location');

  LocationRepository = require('./location/location-repository');

  UserService = (function() {
    var extractLocation, locationRepository, saveUser, userRepository;

    function UserService() {}

    userRepository = new UserRepository();

    locationRepository = new LocationRepository();

    UserService.prototype.findOrSaveUser = function(profile) {
      var newLocation;
      newLocation = extractLocation(profile);
      return userRepository.findUser({
        fbId: profile.id
      }).then(function(user) {
        if (!user) {
          return locationRepository.findLocation({
            fbLocationId: newLocation.fbLocationId
          }).then(function(location) {
            if (!location) {
              return locationRepository.saveLocation(newLocation).then(function(location) {
                return saveUser(profile, newLocation.id);
              });
            } else {
              return saveUser(profile, newLocation.id);
            }
          });
        } else {
          return user;
        }
      });
    };

    UserService.prototype.findMatchingUsers = function(currentUserId) {
      var matchingCriteria;
      matchingCriteria = currentUserId ? {
        _id: {
          $ne: currentUserId
        }
      } : null;
      return userRepository.findUsers(matchingCriteria);
    };

    UserService.prototype.rejectMatch = function(userId, matchUserId) {
      return userRepository.deleteMatch(userId, matchUserId);
    };

    extractLocation = function(profile) {
      var rawLocation;
      rawLocation = JSON.parse(profile._raw).location;
      return new Location({
        fbLocationId: rawLocation.id,
        name: rawLocation.name
      });
    };

    saveUser = function(profile, fbLocationId) {
      var deferred, user;
      deferred = q.defer();
      user = new User({
        fbId: profile.id,
        name: profile.displayName,
        gender: profile.gender,
        fbPictureUrl: profile.photos[0].value.replace(/_.\.(.+)/, '_n.$1'),
        fbLocationId: fbLocationId
      });
      userRepository.saveUser(user).then(function(user) {
        return userRepository.addMatchToUsers(user.id, user.gender).then(function(numUpdatedUsers) {
          return userRepository.addMatchesToUser(user.id, user.gender).then(function(numUpdatedUsers) {
            return deferred.resolve(user);
          });
        });
      });
      return deferred.promise;
    };

    return UserService;

  })();

  module.exports = UserService;

}).call(this);

//# sourceMappingURL=user-service.map
